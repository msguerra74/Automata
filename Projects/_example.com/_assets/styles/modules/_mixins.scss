//------------------------------//
// Mixins
//------------------------------//

// ---------- Background opacity with solid color fallback ---------- //

// Usage: @include background-opacity(bg-color, opacity);
// opacity: value between 0 and 1
// Example: @include background-opacity(white, .5);
@mixin background-opacity($bg-color, $opacity) {
  @if $oldie {
    background-color: $bg-color;
  }
  background-color: rgba($bg-color, $opacity);
}

// ---------- Breakpoints ---------- //

// Usage: @include breakpoint(point) {}
// maxmin: min, max
// point: small, medium, large, xlarge
// Example: @include breakpoint(small) {}
@mixin breakpoint($point, $maxmin: min) {
  @each $breakpoint in $breakpoints {
    @if $point == nth($breakpoint, 1) {
      @media (#{$maxmin}-width: nth($breakpoint, 2)) {
        @content;
      }
    }
  }
}

// ---------- Clearfix ---------- //

// Usage: @include clear;
@mixin clear {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Usage: @extend %clear;
%clear {
  @include clear;
}

// ---------- Ellipsis ---------- //

// Usage: @include ellipsis(width);
// Example: @include ellipsis(50%);
@mixin ellipsis($width: 100%) {
  @include inline-block;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// ---------- EM-based baseline grid typography ---------- //

// Usage: @include em-baseline(target, context, line-height-multiplier, margin-multiplier, margins);
// margins: both, bottom, top
// Example: @include em-baseline(16, 16, 1, 1, bottom);
@mixin em-baseline($target: $base__font-size, $context: $base__font-size, $line-height-multiplier: 1, $margin-multiplier: 1, $margins: bottom) {
  font-size: em($target, $context);
  @if $line-height-multiplier == 0 {
    line-height: 1;
  }
  @else {
    line-height: ceil($target / $base__line-height) * $base__line-height / $target * strip-units($line-height-multiplier);
  }
  @if $margin-multiplier == 0 {
    margin-bottom: 0;
    margin-top: 0;
  }
  @else {
    $margin: em($base__line-height, $target) * strip-units($margin-multiplier);
    @if $margins == both {
      margin-bottom: $margin;
      margin-top: $margin;
    }
    @else if $margins == top {
      margin-bottom: 0;
      margin-top: $margin;
    }
    @else {
      margin-bottom: $margin;
      margin-top: 0;
    }
  }
}

// ---------- EM-based typography ------- //

// Usage: @include em-type(target, context, line-height, margin-multiplier, margins);
// margins: both, bottom, top
// Example: @include em-type(16, 16, 1.5, 1, bottom);
@mixin em-type($target: $base__font-size, $context: $base__font-size, $line-height: $base__line-height / $base__font-size, $margin-multiplier: 1, $margins: bottom) {
  font-size: em($target, $context);
  line-height: strip-units($line-height);
  @if $margin-multiplier == 0 {
    margin-bottom: 0;
    margin-top: 0;
  }
  @else {
    $margin: em($base__line-height, $target) * strip-units($margin-multiplier);
    @if $margins == both {
      margin-bottom: $margin;
      margin-top: $margin;
    }
    @else if $margins == top {
      margin-bottom: 0;
      margin-top: $margin;
    }
    @else {
      margin-bottom: $margin;
      margin-top: 0;
    }
  }
}

// ---------- Font face ---------- //

// Usage: @include font-face(font-family, file-path, weight, style);
// Include in order: normal, bold, italic, bold+italic
// Example: @include font-face(OpenSans, "OpenSans", normal, italic);
@mixin font-face($font-family, $font-name: $font-family, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url("#{$base__font-path}#{$font-name}.eot");
    src: url("#{$base__font-path}#{$font-name}.eot?#iefix") format("embedded-opentype"), url("#{$base__font-path}#{$font-name}.woff") format("woff"), url("#{$base__font-path}#{$font-name}.ttf") format("truetype"), url("#{$base__font-path}#{$font-name}.svg##{$font-family}") format("svg");
  }
}

// ---------- Grid {float,inline-block} ---------- //

// Usage: @include grid--float(columns, float, margin-{left,right}, margin-right);
// Usage: @include grid--inline-block(columns, float, margin-{left,right}, margin-right);
// Example: @include grid--float(24, left, 1);
// Example: @include grid--inline-block(24, 1);
@mixin grid--float($columns: 1, $float: left, $margin-left: 0, $margin-right: $margin-left) {
  float: $float;
  @include prepend($margin-left);
  @include append($margin-right);
  @include column--float($columns - ($margin-left + $margin-right));
}

@mixin grid--inline-block($columns: 1, $margin-left: 0, $margin-right: $margin-left) {
  @include prepend($margin-left);
  @include append($margin-right);
  @include column--inline-block($columns - ($margin-left + $margin-right));
}

@mixin column--float($n: 1) {
  width: $n * $column;
}

@mixin column--inline-block($n: 1) {
  @include inline-block(top);
  width: $n * $column;
}

@mixin prepend($n: 1) {
  margin-left: $column * $n;
}

@mixin append($n: 1) {
  margin-right: $column * $n;
}

// Grid container

// Usage: @include grid__container(max-width);
// align: center, left, right
// Example: @include grid__container(1280, left);
@mixin grid__container($max-width: $base__max-width, $align: center) {
  @include clear;
  @if $max-width == 100% {
    max-width: $max-width;
  }
  @else {
    @if $align == left {}
    @else if $align == right {
      float: right;
    }
    @else {
      margin: auto;
    }
    @include rem-px(max-width, $max-width);
  }
}

// Grid reset

// Usage: @include grid__reset(grid);
// grid: float, inline-block
// Example: @include grid__reset(float);
@mixin grid__reset($grid: float) {
  clear: both;
  @if $grid == inline-block {
    display: block;
  }
  @if $grid == float {
    float: none;
  }
  margin-left: 0;
  margin-right: 0;
  width: auto;
}

// ---------- Hidden ---------- //

// Hide from both screenreaders and browsers
// See: Hidden reversed

// Usage: @include hidden;
@mixin hidden {
  display: none !important;
  visibility: hidden;
}

// Usage: @extend %hidden;
%hidden {
  @include hidden;
}

// ---------- Hidden reversed ---------- //

// Reverses hidden

// Usage: @include hidden--rev;
@mixin hidden--rev {
  display: block !important;
  visibility: visible;
}

// Usage: @extend %hidden--rev;
%hidden--rev {
  @include hidden--rev;
}

// ---------- Image replacement ---------- //

// Usage: @include image-replacement;
@mixin image-replacement {
  background-color: transparent;
  border: 0;
  line-height: 0;
  overflow: hidden;
  &:before {
    content: "";
    display: block;
    width: 0;
    height: 150%;
  }
}

// Usage: @extend %image-replacement;
%image-replacement {
  @include image-replacement;
}

// ---------- Inline block ---------- //

// Usage: @include inline-block(vertical-align);
// vertical-align: %, baseline, bottom, inherit, initial, length, middle, sub, super, text-bottom, text-top, top
// Example: @include inline-block(baseline);
@mixin inline-block($vertical-align: baseline) {
  display: inline-block;
  vertical-align: $vertical-align;
}

// ---------- Invisible ---------- //

// Hide visually and from screenreaders, but maintain layout
// See: Invisible reversed

// Usage: @include invisible;
@mixin invisible {
  visibility: hidden;
}

// Usage: @extend %invisible;
%invisible {
  @include invisible;
}

// ---------- Invisible reversed ---------- //

// Reverses invisible

// Usage: @include invisible--rev;
@mixin invisible--rev {
  visibility: visible;
}

// Usage: @extend %invisible--rev;
%invisible--rev {
  @include invisible--rev;
}

// ---------- Linear gradient ---------- //

// Usage: @include linear-gradient(position, color, fallback);
// Examples:
// @include linear-gradient(#333, #ccc);
// @include linear-gradient(to top, #333, #ccc);
// @include linear-gradient(to top, #333, #ccc, $fallback: #777);
// @include linear-gradient(50deg, #333 0%, #555 50%, #777 51%, #ccc 100%);
@mixin linear-gradient($pos, $G1, $G2: null, $G3: null, $G4: null, $G5: null, $G6: null, $G7: null, $G8: null, $G9: null, $G10: null, $fallback: null) {
  $pos-type: type-of(nth($pos, 1));
  $pos-spec: null;
  $pos-degree: null;
  @if $pos-type == color or nth($pos, 1) == "transparent" {
    $G10: $G9;
    $G9: $G8;
    $G8: $G7;
    $G7: $G6;
    $G6: $G5;
    $G5: $G4;
    $G4: $G3;
    $G3: $G2;
    $G2: $G1;
    $G1: $pos;
    $pos: null;
  }
  @if $pos {
    $positions: _linear-positions-parser($pos);
    $pos-degree: nth($positions, 1);
    $pos-spec: nth($positions, 2);
  }
  $full: $G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10;
  $fallback-color: nth($G1, 1);
  @if type-of($fallback) == color or $fallback == "transparent" {
    $fallback-color: $fallback;
  }
  background-color: $fallback-color;
  background-image: unquote("linear-gradient(#{$pos-spec}#{$full})");
}

// ---------- Media object ---------- //

// Media container

// Usage: @include media;
@mixin media {
  @include clear;
  display: block;
}

// Usage: @extend %media;
%media {
  @include media;
}

// Media body

// Usage: @include media__body;
@mixin media__body {
  overflow: hidden;
}

// Usage: @extend %media__body;
%media__body {
  @include media__body;
}

// Media image

// Usage: @include media__image;
@mixin media__image {
  float: left;
  & img {
    display: block;
  }
}

// Usage: @extend %media__image;
%media__image {
  @include media__image;
}

// Media image reversed

// Usage: @inclue media__image--rev;
@mixin media__image--rev {
  float: right;
  & img {
    display: block;
  }
}

// Usage: @extend %media__image--rev;
%media__image--rev {
  @include media__image--rev;
}

// ---------- Opacity with oldIE fallback ---------- //

// Usage: @include opacity(opacity);
// opacity: value between 0 and 1
// Example: @include opacity(.5);
@mixin opacity($opacity) {
  @if $oldie {
    filter: alpha(opacity = $opacity * 100);
  }
  opacity: $opacity;
}

// ---------- REM-based baseline grid typography with PX fallback ---------- //

// Usage: @include rem-baseline(target, line-height-multiplier, margin-multiplier, margins);
// margins: both, bottom, top
// Example: @include rem-baseline(16, 1, 1, bottom);
@mixin rem-baseline($target: $base__font-size, $line-height-multiplier: 1, $margin-multiplier: 1, $margins: bottom) {
  @include rem-px(font-size, $target);
  @if $line-height-multiplier == 0 {
    line-height: 1;
  }
  @else {
    line-height: ceil($target / $base__line-height) * $base__line-height / $target * strip-units($line-height-multiplier);
  }
  @if $margin-multiplier == 0 {
    margin-bottom: 0;
    margin-top: 0;
  }
  @else {
    $margin-size: strip-units($base__line-height) * strip-units($margin-multiplier);
    @if $margins == both {
      @include rem-px(margin-bottom, $margin-size);
      @include rem-px(margin-top, $margin-size);
    }
    @else if $margins == top {
      margin-bottom: 0;
      @include rem-px(margin-top, $margin-size);
    }
    @else {
      @include rem-px(margin-bottom, $margin-size);
      margin-top: 0;
    }
  }
}

// ---------- REM-based properties with PX fallback ---------- //

// Usage: @include rem-px(property, values...);
// Example: @include rem-px(margin, 12px, 24px);
@mixin rem-px($property, $values...) {
  $all: length($values);
  $px: "";
  $rem: "";
  @for $i from 1 through $all {
    $value: nth($values, $i);
    @if type-of($value) == number {
      $unitless-value: strip-units($value);
      $px: #{$px + $unitless-value}px;
      $rem: #{$rem + rem($unitless-value)};
    }
    @else {
      $px: #{$px + $value};
      $rem: #{$rem + $value};
    }
    @if $i < $all {
      $px: #{$px + " "};
      $rem: #{$rem + " "};
    }
  }
  @if $px == $rem {
    @if $oldie {
      #{$property}: $px;
    }
  }
  @else {
    @if $oldie {
      #{$property}: $px;
    }
    #{$property}: $rem;
  }
}

// ---------- REM-based typography with PX fallback ------- //

// Usage: @include rem-type(target, line-height, margin-multiplier, margins);
// margins: both, bottom, top
// Example: @include rem-type(16, 1.5, 1, bottom);
@mixin rem-type($target: $base__font-size, $line-height: $base__line-height / $base__font-size, $margin-multiplier: 1, $margins: bottom) {
  @include rem-px(font-size, $target);
  line-height: strip-units($line-height);
  @if $margin-multiplier == 0 {
    margin-bottom: 0;
    margin-top: 0;
  }
  @else {
    $margin-size: strip-units($base__line-height) * strip-units($margin-multiplier);
    @if $margins == both {
      @include rem-px(margin-bottom, $margin-size);
      @include rem-px(margin-top, $margin-size);
    }
    @else if $margins == top {
      margin-bottom: 0;
      @include rem-px(margin-top, $margin-size);
    }
    @else {
      @include rem-px(margin-bottom, $margin-size);
      margin-top: 0;
    }
  }
}

// ---------- SVG background with PNG fallback ---------- //

// Usage: @include svg-background(svg);
// Example: @include svg-background(image-name);
@mixin svg-background($svg, $png: $svg) {
  @if $oldie {
    background-image: url(#{$base__image-path}#{$png}.png);
  }
  background-image: url(#{$base__image-path}#{$svg}.svg), none;
}

// ---------- Triangles ---------- //

// Usage: @include triangle(size, color, direction);
// direction: down, down--inset, down--left, down--right, left, left--inset, right, right--inset, up, up--inset, up--left, up--right
// Example:
// selector {
//   position: relative;
//   &:after {
//     @include triangle(24px, black, down);
//   }
// }
@mixin triangle($size: $spacer, $color: $base__color, $direction: down) {
  content: '';
  height: 0;
  position: absolute;
  width: 0;
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  @if $direction == up or $direction == down or $direction == right or $direction == left {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height / 2);
    @if $direction == up {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-bottom: $height solid $foreground-color;
    }
    @else if $direction == right {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
    }
    @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    }
    @else if $direction == left {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
    }
  }
  @else if $direction == up--right or $direction == up--left {
    border-top: $height solid $foreground-color;
    @if $direction == up--right {
      border-left: $width solid $background-color;
    }
    @else if $direction == up--left {
      border-right: $width solid $background-color;
    }
  }
  @else if $direction == down--right or $direction == down--left {
    border-bottom: $height solid $foreground-color;
    @if $direction == down--right {
      border-left: $width solid $background-color;
    }
    @else if $direction == down--left {
      border-right: $width solid $background-color;
    }
  }
  @else if $direction == up--inset {
    border-width: $height $width;
    border-style: solid;
    border-color: $background-color $background-color $foreground-color;
  }
  @else if $direction == down--inset {
    border-width: $height $width;
    border-style: solid;
    border-color: $foreground-color $background-color $background-color;
  }
  @else if $direction == right--inset {
    border-width: $width $height;
    border-style: solid;
    border-color: $background-color $background-color $background-color $foreground-color;
  }
  @else if $direction == left--inset {
    border-width: $width $height;
    border-style: solid;
    border-color: $background-color $foreground-color $background-color $background-color;
  }
}

// ---------- Vertical align middle ---------- //

// Usage: @include vertical-align-middle(pseudo);
// psuedo: after, before
// Example:
// selector {
//   @include vertical-align-middle(before);
//   height: 300px; // Any height
//   inner-selector {
//     @include inline-block(middle);
//     width: auto;
//   }
// }
@mixin vertical-align-middle($pseudo: before) {
  &:#{$pseudo} {
    @include inline-block(middle);
    content: "";
    height: 100%;
    width: .1px;
  }
}

// ---------- Visually hidden ---------- //

// Hide only visually, but have it available for screenreaders
// See: Visually hidden reversed

// Usage: @include visually-hidden;
@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  // Extends visually-hidden to allow the element to be focusable when navigated to via the keyboard
  &.focusable:active,
  &.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

// Usage: @extend %visually-hidden;
%visually-hidden {
  @include visually-hidden;
}

// ---------- Visually hidden reversed ---------- //

// Reverses visually-hidden

// Usage: @include visually-hidden--rev;
@mixin visually-hidden--rev {
  clip: auto;
  clip: rect(auto auto auto auto);
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

// Usage: @extend %visually-hidden--rev;
%visually-hidden--rev {
  @include visually-hidden--rev;
}