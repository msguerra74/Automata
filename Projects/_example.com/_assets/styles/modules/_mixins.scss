//------------------------------//
// Mixins
//------------------------------//

// ---------- Baseline grid ---------- //

// Usage:
// @include baseline(16, 24); // 16px / 24px
// or
// @include baseline(16, 24, 0); // 16px / 24px / margin-(top/bottom): 0
// or
// @include baseline(16, 24, 2); // 16px / 24px / margin-bottom: x 2
// or
// @include baseline(16, 24, 1, both); // 16px / 24px / margin-(top/bottom): x 1

@mixin baseline($target: $base__font-size, $context: $base__font-size, $margin: em($base__line-height, $target), $margins: bottom) {
  font-size: em($target, $context);
  @if $target >= $base__font-size * 3 {
    line-height: strip-units(em($base__line-height, $target)) * 3;
  }
  @else if $target >= $base__font-size * 1.5 {
    line-height: strip-units(em($base__line-height, $target)) * 2;
  }
  @else {
    line-height: strip-units(em($base__line-height, $target));
  }
  @if $margin == 0 {
    margin-bottom: $margin;
    margin-top: $margin;
  }
  @else if $margin == em($base__line-height, $target) {
    margin-bottom: $margin;
    @if $margins == both {
      margin-top: $margin;
    }
    @else {
      margin-top: 0;
    }
  }
  @else {
    margin-bottom: em($base__line-height, $target) * $margin;
    @if $margins == both {
      margin-top: em($base__line-height, $target) * $margin;
    }
    @else {
      margin-top: 0;
    }
  }
}

// ---------- Breakpoints ---------- //

// Usage:
// @include breakpoint(medium) {}

@mixin breakpoint($point) {
  @each $breakpoint in $breakpoints {
    @if $point == nth($breakpoint, 1) {
      @media (min-width: nth($breakpoint, 2)) {
        @content;
      }
    }
  }
}

// ---------- Clearfix ---------- //

@mixin clear {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// ---------- Font face ---------- //

// Based on:
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/css3/_font-face.scss
// Order includes by:
// normal, bold, italic, bold+italic
// Usage:
// @include font-face("Open Sans", "../fonts/OpenSans-Regular-webfont", 400, normal, OpenSansRegular);

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $svg: $font-family) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url("#{$file-path}.eot");
    src: url("#{$file-path}.eot?#iefix") format("embedded-opentype"), url("#{$file-path}.woff") format("woff"), url("#{$file-path}.ttf") format("truetype"), url("#{$file-path}.svg##{$svg}") format("svg");
  }
}

// ---------- Grid (float/inline-block) ---------- //

// Based on:
// https://github.com/studiowolf/taiga-grid
// Usage:
// @include grid--(float/inline-block)(12, 2); // 12 columns with margin-left: 2% and margin-right: 2%
// or
// @include grid--(float/inline-block)(12, 2, 3); // 12 columns with margin-left: 2% and margin-right: 3%
// Note:
// You can also use negative margins

@mixin col--float($n: 1) {
  float: left;
  width: $n * $grid__column;
}

@mixin col--inline-block($n: 1) {
  @include inline-block(top);
  width: $n * $grid__column;
}

@mixin prepend($n: 1) {
  margin-left: $grid__column * $n;
}

@mixin append($n: 1) {
  margin-right: $grid__column * $n;
}

@mixin grid--float($cols: 1, $grid__margin-left: 0, $grid__margin-right: $grid__margin-left) {
  @include col--float($cols - ($grid__margin-left + $grid__margin-right));
  @include prepend($grid__margin-left);
  @include append($grid__margin-right);
}

@mixin grid--inline-block($cols: 1, $grid__margin-left: 0, $grid__margin-right: $grid__margin-left) {
  @include col--inline-block($cols - ($grid__margin-left + $grid__margin-right));
  @include prepend($grid__margin-left);
  @include append($grid__margin-right);
}

// ---------- Hidden ---------- //

// Hide from both screenreaders and browsers

@mixin hidden {
  display: none !important;
  visibility: hidden;
}

// ---------- Image replacement ---------- //

@mixin image-replacement {
  background-color: transparent;
  border: 0;
  line-height: 0;
  overflow: hidden;
  &:before {
    content: "";
    display: block;
    width: 0;
    height: 150%;
  }
}

// ---------- Inline block ---------- //

// Usage:
// @include inline-block(top);

@mixin inline-block($vertical-align: baseline) {
  display: inline-block;
  vertical-align: $vertical-align;
}

// ---------- Invisible ---------- //

// Hide visually and from screenreaders, but maintain layout

@mixin invisible {
  visibility: hidden;
}

// ---------- Media object ---------- //

// Media container

@mixin media {
  @include clear;
  display: block;
}

// Media image

@mixin media__image {
  float: left;
  & img {
    display: block;
  }
}

// Media image reversed

@mixin media__image--rev {
  float: right;
  & img {
    display: block;
  }
}

// Media body

@mixin media__body {
  overflow: hidden;
}

// ---------- Vertical align middle ---------- //

// Based on:
// http://hackingui.com/front-end/10-best-scss-utilities/
// Usage:
// @include vertical-align-middle(after);

@mixin vertical-align-middle($pseudo: before) {
  &:#{$pseudo} {
    @include inline-block(middle);
    content: "";
    height: 100%;
  }
}

// ---------- Visually hidden ---------- //

// Hide only visually, but have it available for screenreaders

@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  // Extends visually-hidden to allow the element to be focusable when navigated to via the keyboard
  &.focusable:active,
  &.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}