//------------------------------//
// Functions
//------------------------------//

// ---------- Linear gradient position parser ---------- //

// Used by: linear-gradient mixin
@function _linear-positions-parser($pos) {
  $type: type-of(nth($pos, 1));
  $spec: null;
  $degree: null;
  $side: null;
  $corner: null;
  $length: length($pos);
  @if $length > 1 {
    @if nth($pos, 1) == "to" {
      $side: nth($pos, 2);
      @if $length == 2 {
        $degree: _position-flipper(nth($pos, 2));
      }
      @else if $length == 3 {
        $corner: nth($pos, 3);
      }
    }
    @else if $length == 2 {
      $side: _position-flipper(nth($pos, 1));
      $corner: _position-flipper(nth($pos, 2));
    }
    @if "#{$side} #{$corner}" == "left top" or "#{$side} #{$corner}" == "top left" {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if "#{$side} #{$corner}" == "right top" or "#{$side} #{$corner}" == "top right" {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if "#{$side} #{$corner}" == "right bottom" or "#{$side} #{$corner}" == "bottom right" {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if "#{$side} #{$corner}" == "left bottom" or "#{$side} #{$corner}" == "bottom left" {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    $spec: to $side $corner;
  }
  @else if $length == 1 {
    @if $type == string {
      $degree: $pos;
      $spec: to _position-flipper($pos);
    }
    @else {
      $degree: -270 - $pos;
      $spec: $pos;
    }
  }
  $degree: unquote($degree + ",");
  $spec: unquote($spec + ",");
  @return $degree $spec;
}

// Used by: _linear-positions-parser function
@function _position-flipper($pos) {
  @return if($pos == left, right, null) if($pos == right, left, null) if($pos == top, bottom, null) if($pos == bottom, top, null);
}

// ---------- PX to EM ---------- //

// Usage: em(target, context);
// Example: em(18, 16);
@function em($target, $context: $base__font-size) {
  @if not unitless($target) {
    $target: strip-units($target);
  }
  @if not unitless($context) {
    $context: strip-units($context);
  }
  @return $target / $context * 1em;
}

// ---------- PX to REM ---------- //

// Usage: rem(target);
// Example: rem(18);
@function rem($target) {
  $base: $base__font-size;
  @if not unitless($target) {
    $target: strip-units($target);
  }
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return $target / $base * 1rem;
}

// ---------- Strip units ---------- //

// Used in mixins only
@function strip-units($value) {
  @return $value / ($value * 0 + 1);
}